{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $a5fd07fa01589658$var$statuses = {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n};\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = [\n            ...initialState.map((row)=>[\n                    ...row\n                ])\n        ];\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$statuses.idle;\n    }\n    moveLeft() {\n        const localState = [\n            ...this.state\n        ];\n        if (!this.validateState(localState)) return;\n        const newState = localState.map((row)=>this.move(row));\n        this.updateState(newState);\n        this.afterAction();\n    }\n    moveRight() {\n        const localState = [\n            ...this.state.map((row)=>[\n                    ...row\n                ].reverse())\n        ];\n        if (!this.validateState(localState)) return;\n        const newState = localState.map((row)=>this.move(row).reverse());\n        this.updateState(newState);\n        this.afterAction();\n    }\n    moveUp() {\n        const rotated90 = this.rotateClockwise(this.state);\n        if (!this.validateState(rotated90)) return;\n        const newState = [\n            ...rotated90.map((row)=>this.move([\n                    ...row\n                ]))\n        ];\n        const rotatedBack = this.rotateCounterClockwise(newState);\n        this.updateState(rotatedBack);\n        this.afterAction();\n    }\n    moveDown() {\n        const rotated90 = this.rotateClockwise(this.state);\n        const rotatedLocalState = [\n            ...rotated90.map((row)=>[\n                    ...row\n                ].reverse())\n        ];\n        if (!this.validateState(rotatedLocalState)) return;\n        const newState = rotatedLocalState.map((row)=>this.move([\n                ...row\n            ]).reverse());\n        const rotatedBack = this.rotateCounterClockwise(newState);\n        this.updateState(rotatedBack);\n        this.afterAction();\n    }\n    /**\n   * Make a move.\n   */ move(vector) {\n        const cells = [\n            ...vector\n        ].filter((c)=>c !== 0);\n        const newRow = [];\n        let i = 0;\n        while(i <= cells.length){\n            const current = cells[i];\n            const next = cells[i + 1];\n            const isPair = current !== undefined && current === next;\n            if (isPair) {\n                newRow.push(current * 2);\n                this.score += current * 2;\n                i += 2;\n            } else {\n                newRow.push(current);\n                i += 1;\n            }\n        }\n        return vector.map((_item, index)=>newRow[index] || 0);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$statuses.playing;\n        this.afterAction(2);\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.resetState();\n        this.status = $a5fd07fa01589658$var$statuses.idle;\n        this.score = 0;\n    }\n    resetState() {\n        this.state = [\n            ...this.initialState.map((row)=>[\n                    ...row\n                ])\n        ];\n    }\n    updateState(state) {\n        this.state = state;\n    }\n    createTile() {\n        const emptyCells = this.getEmpty();\n        if (emptyCells.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const [row, col] = emptyCells[randomIndex];\n        const value = Math.random() > 0.9 ? 4 : 2;\n        this.state[row][col] = value;\n    }\n    /**\n   * Find empty cells.\n   */ getEmpty() {\n        const matrix = this.getState();\n        const emptyCells = [];\n        for(let row = 0; row < matrix.length; row++){\n            for(let col = 0; col < matrix[row].length; col++)if (matrix[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        return emptyCells;\n    }\n    /**\n   * Rotate the fame field.\n   */ rotateClockwise(matrix) {\n        const rows = matrix.length;\n        const cols = matrix[0].length;\n        const resultMatrix = [];\n        for(let col = 0; col < cols; col++)resultMatrix.push(new Array(rows).fill(\"\"));\n        for(let row = 0; row < rows; row++)for(let col = 0; col < cols; col++)resultMatrix[cols - 1 - col][row] = matrix[row][col];\n        return resultMatrix;\n    }\n    /**\n   * Rotate the fame field back to the original state.\n   */ rotateCounterClockwise(transformedMatrix) {\n        const rows = transformedMatrix.length;\n        const cols = transformedMatrix[0].length;\n        const originalMatrix = [];\n        for(let col = 0; col < cols; col++)originalMatrix.push(new Array(rows).fill(\"\"));\n        for(let row = 0; row < rows; row++)for(let col = 0; col < cols; col++)originalMatrix[row][cols - 1 - col] = transformedMatrix[col][row];\n        return originalMatrix;\n    }\n    afterAction(newCellsCount = 1) {\n        const state = this.getState();\n        for(let i = 0; i < newCellsCount; i++)this.createTile();\n        if (this.isWin(state)) {\n            this.status = $a5fd07fa01589658$var$statuses.win;\n            return;\n        }\n        if (this.isLose(state)) this.status = $a5fd07fa01589658$var$statuses.lose;\n    }\n    validateState(localState) {\n        if (this.status !== $a5fd07fa01589658$var$statuses.playing) return;\n        const canMerge = localState.some((row)=>{\n            const withoutEmpty = row.filter((cell)=>cell);\n            const hasMergeableCells = withoutEmpty.map((cell, index)=>{\n                const current = cell;\n                const next = row[index + 1];\n                return current === next;\n            });\n            return hasMergeableCells.includes(true);\n        });\n        const hasEmptyTiles = localState.some((row)=>{\n            const firstEmpty = row.findIndex((cell)=>cell === 0);\n            const rest = row.slice(firstEmpty);\n            const hasEmpty = rest.findIndex((cell)=>cell !== 0) > 0;\n            return hasEmpty;\n        });\n        return canMerge || hasEmptyTiles;\n    }\n    isWin(state) {\n        return state.flat().includes(2048);\n    }\n    isLose(state) {\n        const rotated90 = this.rotateClockwise(state);\n        const rotated180 = [\n            ...this.state.map((row)=>[\n                    ...row\n                ].reverse())\n        ];\n        const rotated270 = [\n            ...rotated90.map((row)=>[\n                    ...row\n                ].reverse())\n        ];\n        return [\n            state,\n            rotated90,\n            rotated180,\n            rotated270\n        ].every((localState)=>this.validateState(localState) === false);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$container = document.querySelector(\".container\");\nconst $09e991522ca7e64e$var$button = $09e991522ca7e64e$var$container.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = $09e991522ca7e64e$var$container.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageRestart = $09e991522ca7e64e$var$container.querySelector(\".message-restart\");\nconst $09e991522ca7e64e$var$messageLose = $09e991522ca7e64e$var$container.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = $09e991522ca7e64e$var$container.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$scoreInfo = $09e991522ca7e64e$var$container.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$fieldRows = [\n    ...$09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\")\n];\nconst $09e991522ca7e64e$var$fieldCells = $09e991522ca7e64e$var$fieldRows.map((row)=>[\n        ...row.children\n    ]);\nfunction $09e991522ca7e64e$var$renderGameField(state, cells) {\n    state.forEach((row, rowIndex)=>{\n        row.forEach((cell, cellIndex)=>{\n            const cellItem = cells[rowIndex][cellIndex];\n            if (cell === 0) {\n                cellItem.classList = \"field-cell\";\n                cellItem.innerHTML = \"\";\n            } else {\n                cellItem.classList = `field-cell field-cell--${cell}`;\n                cellItem.innerHTML = cell;\n            }\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$renderScore(score, element) {\n    element.innerHTML = score;\n}\nfunction $09e991522ca7e64e$var$renderMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    switch(gameStatus){\n        case \"playing\":\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageRestart.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n        default:\n            $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        const state = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$renderGameField(state, $09e991522ca7e64e$var$fieldCells);\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        const state = $09e991522ca7e64e$var$game.getState();\n        const score = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$renderScore(score, $09e991522ca7e64e$var$scoreInfo);\n        $09e991522ca7e64e$var$renderGameField(state, $09e991522ca7e64e$var$fieldCells);\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n    }\n    $09e991522ca7e64e$var$renderMessage();\n});\ndocument.addEventListener(\"keydown\", (keyboard)=>{\n    keyboard.preventDefault();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus !== \"playing\") return;\n    switch(keyboard.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    const state = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$renderGameField(state, $09e991522ca7e64e$var$fieldCells, score);\n    $09e991522ca7e64e$var$renderScore(score, $09e991522ca7e64e$var$scoreInfo);\n    $09e991522ca7e64e$var$renderMessage();\n});\n\n\n//# sourceMappingURL=index.5ef58f45.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst container = document.querySelector('.container');\nconst button = container.querySelector('.button');\nconst messageStart = container.querySelector('.message-start');\nconst messageRestart = container.querySelector('.message-restart');\nconst messageLose = container.querySelector('.message-lose');\nconst messageWin = container.querySelector('.message-win');\nconst scoreInfo = container.querySelector('.game-score');\n\nconst gameField = document.querySelector('.game-field');\nconst fieldRows = [...gameField.querySelectorAll('.field-row')];\nconst fieldCells = fieldRows.map((row) => [...row.children]);\n\nfunction renderGameField(state, cells) {\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const cellItem = cells[rowIndex][cellIndex];\n\n      if (cell === 0) {\n        cellItem.classList = 'field-cell';\n        cellItem.innerHTML = '';\n      } else {\n        cellItem.classList = `field-cell field-cell--${cell}`;\n        cellItem.innerHTML = cell;\n      }\n    });\n  });\n}\n\nfunction renderScore(score, element) {\n  element.innerHTML = score;\n}\n\nfunction renderMessage() {\n  const gameStatus = game.getStatus();\n\n  switch (gameStatus) {\n    case 'playing':\n      messageStart.classList.add('hidden');\n      messageRestart.classList.remove('hidden');\n      break;\n    case 'win':\n      messageRestart.classList.add('hidden');\n      messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      messageStart.classList.add('hidden');\n      messageRestart.classList.add('hidden');\n      messageLose.classList.remove('hidden');\n      break;\n    default:\n      messageStart.classList.remove('hidden');\n      messageRestart.classList.add('hidden');\n      messageWin.classList.add('hidden');\n      messageLose.classList.add('hidden');\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    game.start();\n\n    const state = game.getState();\n\n    renderGameField(state, fieldCells);\n\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n    button.classList.remove('start');\n  } else {\n    game.restart();\n\n    const state = game.getState();\n    const score = game.getScore();\n\n    renderScore(score, scoreInfo);\n    renderGameField(state, fieldCells);\n\n    button.textContent = 'Start';\n    button.classList.add('start');\n    button.classList.remove('restart');\n  }\n\n  renderMessage();\n});\n\ndocument.addEventListener('keydown', (keyboard) => {\n  keyboard.preventDefault();\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus !== 'playing') {\n    return;\n  }\n\n  switch (keyboard.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      break;\n  }\n\n  const state = game.getState();\n  const score = game.getScore();\n\n  renderGameField(state, fieldCells, score);\n  renderScore(score, scoreInfo);\n  renderMessage();\n});\n","'use strict';\n\nconst statuses = {\n  idle: 'idle',\n  playing: 'playing',\n  win: 'win',\n  lose: 'lose',\n};\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = [...initialState.map((row) => [...row])];\n    this.score = 0;\n    this.status = statuses.idle;\n  }\n\n  moveLeft() {\n    const localState = [...this.state];\n\n    if (!this.validateState(localState)) {\n      return;\n    }\n\n    const newState = localState.map((row) => this.move(row));\n\n    this.updateState(newState);\n    this.afterAction();\n  }\n\n  moveRight() {\n    const localState = [...this.state.map((row) => [...row].reverse())];\n\n    if (!this.validateState(localState)) {\n      return;\n    }\n\n    const newState = localState.map((row) => this.move(row).reverse());\n\n    this.updateState(newState);\n    this.afterAction();\n  }\n\n  moveUp() {\n    const rotated90 = this.rotateClockwise(this.state);\n\n    if (!this.validateState(rotated90)) {\n      return;\n    }\n\n    const newState = [...rotated90.map((row) => this.move([...row]))];\n    const rotatedBack = this.rotateCounterClockwise(newState);\n\n    this.updateState(rotatedBack);\n    this.afterAction();\n  }\n\n  moveDown() {\n    const rotated90 = this.rotateClockwise(this.state);\n    const rotatedLocalState = [...rotated90.map((row) => [...row].reverse())];\n\n    if (!this.validateState(rotatedLocalState)) {\n      return;\n    }\n\n    const newState = rotatedLocalState.map((row) =>\n      this.move([...row]).reverse(),\n    );\n    const rotatedBack = this.rotateCounterClockwise(newState);\n\n    this.updateState(rotatedBack);\n    this.afterAction();\n  }\n\n  /**\n   * Make a move.\n   */\n  move(vector) {\n    const cells = [...vector].filter((c) => c !== 0);\n    const newRow = [];\n\n    let i = 0;\n\n    while (i <= cells.length) {\n      const current = cells[i];\n      const next = cells[i + 1];\n      const isPair = current !== undefined && current === next;\n\n      if (isPair) {\n        newRow.push(current * 2);\n        this.score += current * 2;\n        i += 2;\n      } else {\n        newRow.push(current);\n        i += 1;\n      }\n    }\n\n    return vector.map((_item, index) => newRow[index] || 0);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = statuses.playing;\n    this.afterAction(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.resetState();\n    this.status = statuses.idle;\n    this.score = 0;\n  }\n\n  resetState() {\n    this.state = [...this.initialState.map((row) => [...row])];\n  }\n\n  updateState(state) {\n    this.state = state;\n  }\n\n  createTile() {\n    const emptyCells = this.getEmpty();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    const [row, col] = emptyCells[randomIndex];\n\n    const value = Math.random() > 0.9 ? 4 : 2;\n\n    this.state[row][col] = value;\n  }\n\n  /**\n   * Find empty cells.\n   */\n  getEmpty() {\n    const matrix = this.getState();\n    const emptyCells = [];\n\n    for (let row = 0; row < matrix.length; row++) {\n      for (let col = 0; col < matrix[row].length; col++) {\n        if (matrix[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  /**\n   * Rotate the fame field.\n   */\n  rotateClockwise(matrix) {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    const resultMatrix = [];\n\n    for (let col = 0; col < cols; col++) {\n      resultMatrix.push(new Array(rows).fill(''));\n    }\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        resultMatrix[cols - 1 - col][row] = matrix[row][col];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  /**\n   * Rotate the fame field back to the original state.\n   */\n  rotateCounterClockwise(transformedMatrix) {\n    const rows = transformedMatrix.length;\n    const cols = transformedMatrix[0].length;\n    const originalMatrix = [];\n\n    for (let col = 0; col < cols; col++) {\n      originalMatrix.push(new Array(rows).fill(''));\n    }\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        originalMatrix[row][cols - 1 - col] = transformedMatrix[col][row];\n      }\n    }\n\n    return originalMatrix;\n  }\n\n  afterAction(newCellsCount = 1) {\n    const state = this.getState();\n\n    for (let i = 0; i < newCellsCount; i++) {\n      this.createTile();\n    }\n\n    if (this.isWin(state)) {\n      this.status = statuses.win;\n\n      return;\n    }\n\n    if (this.isLose(state)) {\n      this.status = statuses.lose;\n    }\n  }\n\n  validateState(localState) {\n    if (this.status !== statuses.playing) {\n      return;\n    }\n\n    const canMerge = localState.some((row) => {\n      const withoutEmpty = row.filter((cell) => cell);\n\n      const hasMergeableCells = withoutEmpty.map((cell, index) => {\n        const current = cell;\n        const next = row[index + 1];\n\n        return current === next;\n      });\n\n      return hasMergeableCells.includes(true);\n    });\n\n    const hasEmptyTiles = localState.some((row) => {\n      const firstEmpty = row.findIndex((cell) => cell === 0);\n      const rest = row.slice(firstEmpty);\n      const hasEmpty = rest.findIndex((cell) => cell !== 0) > 0;\n\n      return hasEmpty;\n    });\n\n    return canMerge || hasEmptyTiles;\n  }\n\n  isWin(state) {\n    return state.flat().includes(2048);\n  }\n\n  isLose(state) {\n    const rotated90 = this.rotateClockwise(state);\n    const rotated180 = [...this.state.map((row) => [...row].reverse())];\n    const rotated270 = [...rotated90.map((row) => [...row].reverse())];\n\n    return [state, rotated90, rotated180, rotated270].every(\n      (localState) => this.validateState(localState) === false,\n    );\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$statuses","idle","playing","win","lose","$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","score","status","moveLeft","localState","validateState","newState","move","updateState","afterAction","moveRight","reverse","moveUp","rotated90","rotateClockwise","rotatedBack","rotateCounterClockwise","moveDown","rotatedLocalState","vector","cells","filter","c","newRow","i","length","current","next","undefined","push","_item","index","getScore","getState","getStatus","start","restart","resetState","createTile","emptyCells","getEmpty","randomIndex","Math","floor","random","col","matrix","rows","cols","resultMatrix","Array","fill","transformedMatrix","originalMatrix","newCellsCount","isWin","isLose","canMerge","some","hasMergeableCells","withoutEmpty","cell","includes","hasEmptyTiles","firstEmpty","findIndex","rest","slice","flat","rotated180","rotated270","every","$09e991522ca7e64e$var$container","document","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageRestart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$scoreInfo","$09e991522ca7e64e$var$fieldCells","$09e991522ca7e64e$var$fieldRows","$09e991522ca7e64e$var$gameField","querySelectorAll","children","$09e991522ca7e64e$var$renderGameField","forEach","rowIndex","cellIndex","cellItem","classList","innerHTML","$09e991522ca7e64e$var$renderMessage","add","remove","addEventListener","textContent","element","keyboard","preventDefault","gameStatus","key"],"version":3,"file":"index.5ef58f45.js.map"}